<?php
//----------------------------------------------------------------------------------------------------------------//
//----------------------------------------Recup info sur l'utilisateur--------------------------------------------//

$utilisateur_id = ID_DE_LUTILISATEUR;
$user = utilisateur::where('utilisateur_id', '=', $utilisateur_id)->first();

//----------------------------------------------------------------------------------------------------------------//
//------------------------------Liste des utilisateur qui ne sont pas ami de l'utilisateur------------------------//

$utilisateur_id = ID_DE_LUTILISATEUR;
$tabIDFavori = array($utilisateur_id );
$user = utilisateur::where('utilisateur_id', '=', $utilisateur_id )->first();
foreach ($user->contact as $contact) {
    $userContactID = $contact->contact_id;
    array_push($tabIDFavori, $userContactID);
}
$pascontact = utilisateur::whereNotIn('utilisateur_id', $tabIDFavori)->get();
foreach ($pascontact as $utilisateurNonContact) {
    // ICI tu as les utilisateurs qui ne sont pas en contact de ton utilisateur
}
//----------------------------------------------------------------------------------------------------------------//
//--------------------Requete de recupération des evenement d'un utilisateur pour la page d'accueil---------------//

$utilisateur_id = ID_DE_LUTILISATEUR;
$user = utilisateur::where('utilisateur_id', '=', $utilisateur_id)->first();
foreach ($user->evenement as $event) {
    //Chaque evenements de l'utilisateur (variable $user->evenement) dans la variable $event 
}

//------------------------------------TRIE PAR DATE CROISSANTE----------------------------------------------------// 

$utilisateur_id = ID_DE_LUTILISATEUR;
$user = utilisateur::where('utilisateur_id', '=', $utilisateur_id)->first();
foreach ($user->evenement()->orderBy('dateDebut')->get() as $event) {
    //Chaque evenements de l'utilisateur (variable $user->evenement) dans la variable $event     
}

//----------------------------------------------------------------------------------------------------------------//
//----------------------------------------Recuperer les contact d'un utilisateur----------------------------------// 

$utilisateur_id = ID_DE_LUTILISATEUR;
$user = utilisateur::where('utilisateur_id', '=', $utilisateur_id )->first();
foreach ($user->contact as $contact) {
    $userContact= utilisateur::where('utilisateur_id', '=', $contact->contact_id)->first();
    //Chaque $userContact represente l'objet representant l'utilisateur etant un Favori de l'utilisateur ayant 
    //  pour ID celui de $utilisateur_id
}

//----------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------Ajouter un contact---------------------------------------------//

$utilisateur_id = ID_DE_LUTILISATEUR;
$contact_id = ID_DU_CONTACT;
$contact = new contact();
$contact->utilisateur_id = $utilisateur_id;
$contact->contact_id = $contact_id;
$contact->save();

//----------------------------------------------------------------------------------------------------------------//
//------------------------------------------------Supprimmer un contact-------------------------------------------//

$utilisateur_id = ID_DE_LUTILISATEUR;
$contact_id = ID_DU_CONTACT;
$contact = contact::where('utilisateur_id', '=', $utilisateur_id )->where('contact_id', '=', $contact_id )->first();
$contact->delete();

//----------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------Creer un evenement---------------------------------------------//
$evenement = new evenement();
$evenement->public = ; // 0 pour privé 
					   // 1 pour public 
$evenement->notification = ; // 0 pour privé 
							 // 1 pour public 
$evenement->intitule = ; // Titre de l'evenement (max 255char)
$evenement->dateDebut = ; // FORMAT : 'YYYY-MM-DD' , Exemple '2018-5-17'
$evenement->dateFin = ; // FORMAT : 'YYYY-MM-DD' , Exemple '2018-5-17'
$evenement->description = ; // Description de l'evenement (max 255char)
$evenement->lieu = ; // Lieu de l'evenement (max 255char)
$evenement->suppressionAutomatique = ; // 1 pour activer ou 0 (default = 0)

$evenement->save(); 
// PS : oubliez pas d'ajouter l'utilisateur en proprietaire (CF ci-dessous)

//----------------------------------------------------------------------------------------------------------------//
//------------------------------------Ajouter un utilisateur a un evenement---------------------------------------//

$evenement_id = ID_DE_LEVENEMENT;
$utilisateur_id = ID_DE_LUTILISATEUR;
$evenement = evenement::where('evenement_id','=',$evenement_id)->first();
$droit = ; // Au choix : 'proprietaire','editeur','visiteur' 
$evenement->utilisateur()->attach($utilisateur_id,['droit'=>$droit]);

//----------------------------------------------------------------------------------------------------------------//
//--------------------------Modifier les droits d'un utilisateur a un evenement-----------------------------------//

$evenement_id = ID_DE_LEVENEMENT;
$utilisateur_id = ID_DE_LUTILISATEUR;
$evenement = evenement::where('evenement_id','=',$evenement_id)->first();
$nouveauDroit = ; // Au choix : 'proprietaire','editeur','visiteur' 
$evenement->utilisateur()->updateExistingPivot($utilisateur_id, ['droit' => $nouveauDroit], false);

//----------------------------------------------------------------------------------------------------------------//
//----------------------------------------Ajouter une tache-------------------------------------------------------//

$evenement_id = ID_DE_LEVENEMENT;
$typetache_id = ID_DU_TYPETACHE;
$tache = new tache();

$tache->nom = ; // Nom de la tache (max 255char)
$tache->description = ; // Description de la tache (max 255char)
$tache->quantiteTotal = ; // SI elle est de type quentitative (max 999999)
$tache->dateFin = ; // SI elle est de type datedefin , FORMAT : 'YYYY-MM-DD' , Exemple '2018-5-17'
$tache->evenement_id = $evenement_id; 
$tache->typetache_id = $typetache_id;

$tache->save();

//----------------------------------------------------------------------------------------------------------------//
//------------------------------------------Supprimer un tache----------------------------------------------------//

$tache_id = ID_DE_LA_TACHE;
$tache = tache::where('tache_id','=',$tache_id)->first();
$tache->delete();

//----------------------------------------------------------------------------------------------------------------//
//-------------------------------------Afficher participant a un evenement----------------------------------------//

$evenement_id = ID_DE_LEVENEMENT;
$evenement = evenement::where('evenement_id','=',$evenement_id)->first();
foreach ($evenement->utilisateur as $participant) {
	// Chaque $participant correspond a un objet utilisateur etant dans l'evenement $evenement

	// Si besoin le droit du participant
	$droitDuParticipant = $participant->pivot->droit;
}

//----------------------------------------------------------------------------------------------------------------//
//----------------------------------Supprimmer un participant a un evenement--------------------------------------//

$evenement_id = ID_DE_LEVENEMENT;
$utilisateur_id = ID_DE_LUTILISATEUR;
$evenement = evenement::where('evenement_id','=',$evenement_id)->first();
$evenement->utilisateur()->detach([$utilisateur_id]);

//----------------------------------------------------------------------------------------------------------------//
//---------------------------------------Se desinscrie d'un evenement---------------------------------------------//

$evenement_id = ID_DE_LEVENEMENT;
$utilisateur_id = ID_DE_LUTILISATEUR;
$user = utilisateur::where('utilisateur_id', '=', $utilisateur_id )->first();
$user->evenement()->detach([$evenement_id]);

//----------------------------------------------------------------------------------------------------------------//
//-----------------------------------------Supprimmer un evenement------------------------------------------------//

$evenement_id = ID_DE_LEVENEMENT;
$evenement = evenement::where('evenement_id','=',$evenement_id)->first();
$evenement->delete();
// NE PAS OULIER DE DESINSCRIRE TOUT LE MONDE ET DE SUPPRIMER LES INVITATION ETC...

//----------------------------------------------------------------------------------------------------------------//
//-----------------------------------------Liste evenement public-------------------------------------------------//

$evenement = evenement::where('public','=',1)->first();

//----------------------------------------------------------------------------------------------------------------//
//----------------------------------Liste des notification de l'utiisateur----------------------------------------//

$utilisateur_id = ID_DE_LUTILISATEUR;
$user = utilisateur::where('utilisateur_id', '=', $utilisateur_id )->first();
foreach ($user->notification as $notif) {
	// Chaque $notif correspond a un objet notification de l'utilisateur $user
}

//----------------------------------------------------------------------------------------------------------------//
//----------------------------------Liste des invitation de l'utilisateur-----------------------------------------//

$utilisateur_id = ID_DE_LUTILISATEUR;
$user = utilisateur::where('utilisateur_id', '=', $utilisateur_id )->first();
foreach ($user->notification()->where('invitation','=',1)->get() as $invitation) {
	// Chaque $invitation correspond a un objet notification de l'utilisateur $user qui est une invitation
}

//----------------------------------------------------------------------------------------------------------------//
//-------------------------------------Supprimer une notification-------------------------------------------------//

$notification_id = ID_DE_LA_NOTIFICATION;
$notification = notification::where('notification_id','=',$notification_id)->first();
$notification->delete();

//----------------------------------------------------------------------------------------------------------------//
//----------------------------------------Creer un type de tache--------------------------------------------------//

$typetache = new typetache();
$typetache->photo = ; // Le nombre de photo que doit contenir la tache (0 si aucun)
$typetache->text = ; // Le nombre de text que doit contenir la tache (0 si aucun)
$typetache->datefin = ; // 0 pour ne pas avoir une date de fin 
						// 1 pour avoir une date de fin 
$typetache->quentite = ; // 0 pour ne pas avoir de quentite 
						 // 1 pour avoir une quentite

//----------------------------------------------------------------------------------------------------------------//
//-----------------------------------Affecter utilisateur a une tache---------------------------------------------//

$tache_id = ID_DE_LA_TACHE;
$utilisateur_id = ID_DE_LUTILISATEUR;
$tache = tache::where('tache_id','=',$tache_id)->first();
$quentite = ; // Quentite de contribution si on est en type avec quentite 
$tache->utilisateur()->attach($utilisateur_id,['quentite'=>$quentite]);

//----------------------------------------------------------------------------------------------------------------//
//------------------------------------------Valider une tache-----------------------------------------------------//

$tache_id = ID_DE_LA_TACHE;
$tache = tache::where('tache_id','=',$tache_id)->first();
$tache->valide = 1;
$tache->save();

//----------------------------------------------------------------------------------------------------------------//
//--------------------------Modifier contribution d'un utilisateur a une tache------------------------------------//

$tache_id = ID_DE_LA_TACHE;
$utilisateur_id = ID_DE_LUTILISATEUR;
$tache = tache::where('tache_id','=',$tache_id)->first();
$nouvelleQuentite = ; // Quentite de contribution si on est en type avec quentite 
$tache->utilisateur()->updateExistingPivot($utilisateur_id, ['quentite'=>$nouvelleQuentite], false);


//----------------------------------------------------------------------------------------------------------------//
//-----------------------------------Liste participant a une tache------------------------------------------------//

$tache_id = ID_DE_LA_TACHE;
$tache = tache::where('tache_id','=',$tache_id)->first();
foreach ($tache->utilisateur as $participant) {
	// Chaque $participant correspond a un objet utilisateur etant dans la tache $tache

	// Si besoin la quentite de ce participant
	$quentiteDuParticipant = $participant->pivot->quentite;
}

//----------------------------------------------------------------------------------------------------------------//
//---------------------------------Supprimmer utilisateur d'une tache---------------------------------------------//

$tache_id = ID_DE_LA_TACHE;
$utilisateur_id = ID_DE_LUTILISATEUR;
$tache = tache::where('tache_id','=',$tache_id)->first();
$tache->utilisateur()->detach([$utilisateur_id]);

//----------------------------------------------------------------------------------------------------------------//
//---------------------------------Ajouter une notification-------------------------------------------------------//

$evenement_id = ID_DE_LEVENEMENT;
$utilisateur_id = ID_DE_LUTILISATEUR;
$notification = new notification();
$notification->invitation = ; // 0 si c'est pas un invitation
							  // 1 si c'est une invitation
$notification->message = ; // Le message de la notification
$notification->utilisateur_id = $utilisateur_id; 
$notification->evenement_id = $evenement_id; 